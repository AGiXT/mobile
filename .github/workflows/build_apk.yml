name: Build and Deploy
on:
  push:
    branches:
      - '**'
jobs:
  apk:
    name: Build APK
    runs-on: ubuntu-latest
    container:
      image: joshxt/flutterbuilder:main
    env:
      APP_NAME: AGiXT
      AGIXT_SERVER: https://api.agixt.dev
      APP_URI: https://agixt.dev
    outputs:
      new_tag: ${{ steps.next_tag_version.outputs.new_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Increment tag version
        uses: mathieudutour/github-tag-action@v6.2
        id: next_tag_version
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: main
          create_annotated_tag: true
          dry_run: true
      - name: Setup repositories cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Git Safe Directory
        run: |
            git config --global --add safe.directory /usr/local/flutter && \
            git config --global --add safe.directory /app

      - name: Install dependencies
        run: flutter pub get
      - name: Run tests
        run: flutter test
      - name: Build Android release
        run: |
          flutter build apk --release
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release.apk
          path: build/app/outputs/flutter-apk/app-release.apk
      - name: Send Report to Discord
        if: always()
        run: |
          # Get build status and branch information
          BRANCH_NAME=$(echo ${{ github.ref }} | awk -F'/' '{print $NF}')
          
          # Map GitHub usernames to Discord IDs - using POSIX-compliant string comparison
          if [ "${{ github.actor }}" = "Josh-XT" ]; then
            DISCORD_NAME="<@381837595522367488>"
          elif [ "${{ github.actor }}" = "AGiXT" ]; then
            DISCORD_NAME="<@329145730725838858>"
          elif [ "${{ github.actor }}" = "waiscodes" ]; then
            DISCORD_NAME="<@670762167037067304>"
          elif [ "${{ github.actor }}" = "birdup000" ]; then
            DISCORD_NAME="<@856308374567256074>"
          elif [ "${{ github.actor }}" = "Nick-XT" ]; then
            DISCORD_NAME="<@381908912951001088>"
          else
            DISCORD_NAME="**${{ github.actor }}**"
          fi

          # Set build status emoji and message - using POSIX-compliant string comparison
          if [ "${{ job.status }}" = "success" ]; then
            STATUS_EMOJI="✅"
            STATUS_TEXT="Build successful"
          else
            STATUS_EMOJI="❌"
            STATUS_TEXT="Build failed"
          fi

          # Create the message
          VERSION="${{ steps.next_tag_version.outputs.new_tag }}"
          MESSAGE="$STATUS_EMOJI $STATUS_TEXT for **${{ env.APP_NAME }}** v$VERSION (branch **$BRANCH_NAME**)\nCommit: **${{ github.sha }}**\nBy: $DISCORD_NAME"
          
          # Only send APK if build succeeded - using POSIX-compliant string comparison
          if [ "${{ job.status }}" = "success" ]; then
            FILE_TO_SEND="build/app/outputs/flutter-apk/app-release.apk"
            if [ -f "$FILE_TO_SEND" ]; then
              echo "Sending APK: $FILE_TO_SEND"
              curl -H "Content-Type:multipart/form-data" \
                    -F "file=@$FILE_TO_SEND" \
                    -F "content=$MESSAGE" \
                    "${{ secrets.DISCORD_WEBHOOK }}"
            else
              echo "APK file not found at: $FILE_TO_SEND"
              # Send message without file since APK wasn't found
              curl -H "Content-Type:application/json" \
                    -d "{\"content\":\"$MESSAGE\\n⚠️ Warning: APK file was not found!\"}" \
                    "${{ secrets.DISCORD_WEBHOOK }}"
            fi
          else
            # Just send the message without a file attachment
            curl -H "Content-Type:application/json" \
                  -d "{\"content\":\"$MESSAGE\"}" \
                  "${{ secrets.DISCORD_WEBHOOK }}"
          fi
  release:
    name: Create Release and Upload APK
    needs: [apk]
    runs-on: ubuntu-latest
    # Only run the release job on the main branch
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.apk.outputs.new_tag }}
          name: ${{ needs.apk.outputs.new_tag }}
          draft: false
          prerelease: false
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Download APK from build
        uses: actions/download-artifact@v4
        with:
          name: app-release.apk
      - name: Upload Release APK
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.apk.outputs.new_tag }}
          files: app-release.apk
          token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ needs.apk.outputs.new_tag }}
