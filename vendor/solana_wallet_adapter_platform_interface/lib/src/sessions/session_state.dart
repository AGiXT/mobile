/// Imports
/// ------------------------------------------------------------------------------------------------

import 'package:solana_common/validators.dart';
import '../../types.dart';
import 'session_encoding.dart';


/// Session State
/// ------------------------------------------------------------------------------------------------

/// An encrypted session state.
class SessionState {

  /// Stores the keys and sequence numbers of an encrypted session state.
  SessionState();

  // /// An `ephemeral` ECDSA keypair on the P-256 curve, generated by the dApp endpoint.
  // final AssociationKeypair associationKeypair;

  // /// An `ephemeral` ECDH keypair on the P-256 curve, generated by the dApp endpoint.
  // final SessionKeypair sessionKeypair;

  /// An `ephemeral` AES-128-GCM secret key, calculated by the dApp and wallet endpoints.
  SharedSeckey get sharedSeckey => _sharedSeckey!;
  SharedSeckey? _sharedSeckey;

  /// The dApp endpoint's monotonically increasing message sequence number, which starts at 1.
  int _dAppSequenceNumber = 0;

  /// The wallet endpoint's monotonically increasing message sequence number, which starts at 1.
  int _walletSequenceNumber = 0;

  /// True if [sharedSeckey] has been set for the current session.
  bool get isEncrypted => _sharedSeckey != null;

  /// Creates a session encoder.
  SessionEncoder get encoder => SessionEncoder(this);

  /// Creates a session decoder.
  SessionDecoder get decoder => SessionDecoder(this);

  /// The initialisation vector's byte length.
  static const int aesIvByteLength = 12;

  /// The message authentication code's bit length (128-bits).
  static const int aesTagBitLength = 16 * 8;
  
  /// The sequence number's byte length.
  static const int sequenceNumberByteLength = 4;

  /// The shared secret's bit length (256-bits).
  static const int sharedSecretBitLength = 32 * 8;

  /// The AES-128-GCM shared secret key's bit length (128-bits).
  static const int aesGcmSeckeyBitLength = 16 * 8;

  /// Sets the session's [sharedSeckey].
  void encrypt(final SharedSeckey sharedSeckey) => _sharedSeckey = sharedSeckey;

  /// Returns the next dApp sequence number.
  int nextDAppSequenceNumber() => ++_dAppSequenceNumber;

  /// Validates the wallet's sequence number, throwing an exception if [sequenceNumber] is invalid.
  ///
  /// "The message sequence number is monotonically increasing, and starts at 1 when session 
  /// establishment completes. Each endpoint should verify that the sequence number is 1 greater 
  /// than that of the previous message received (other than for the first message received)" 
  /// [source](https://solana-mobile.github.io/mobile-wallet-adapter/spec/spec.html#encrypted-message-wrapping).
  void checkWalletSequenceNumber(final int sequenceNumber) {
    checkEq(sequenceNumber, _walletSequenceNumber + 1);
    _walletSequenceNumber = sequenceNumber;
  }
}